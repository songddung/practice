# ### 논리와 증명12
# - n ^ 2 == 3
# 의
# 배수
# 일때
# n == 3
# 의
# 배수?
# - n ^ 2 == 3
# k
#
# - 만약
# n을
# 3
# 으로
# 나누었을때
# 나머지가
# 0
# 이라면,
# n == 3
# m
# n ^ 2 == (3m) ^ 2 == 9
# m ^ 2
# 따라서
# n ^ 2
# 가
# 3
# 의
# 배수일때, n도
# 3
# 의
# 배수
#
# - 만약
# n을
# 3
# 으로
# 나누었을때
# 나머지가
# 1
# 이라면,
# n == 3
# m + 1
# n ^ 2 == (3m+1) ^ 2 == 9
# m ^ 2 + 6
# m + 1
# 따라서
# n ^ 2
# 가
# 3
# 의
# 배수일때, n은
# 3
# 의
# 배수가
# 아님
#
# - 만약
# n을
# 3
# 으로
# 나누었을때
# 나머지가
# 2
# 이라면,
# n == 3
# m + 2
# n ^ 2 == (3m+2) ^ 2 == 9
# m ^ 2 + 12
# m + 4
# 따라서
# n ^ 2
# 가
# 3
# 의
# 배수일때, n은
# 3
# 의
# 배수가
# 아님
#
# ### 수와 표현 3
# - 비교와
# 이유
#
# 1.
# 2
# n( <) n ^ 2
# - n == 0
# 2
# n = 0
# n ^ 2 = 0
# - n == 1
# 2
# n = 2
# n ^ 2 = 1
#
# - n == 2
# 2
# n = 4
# n ^ 2 = 4
#
# n == 3
# 2
# n = 6
# n ^ 2 == 9
# n은
# 충분히
# 크니까
# n ^ 2
# 이
# 크다
#
# 2.
# 2 ^ n / 2( > ) sqrt(3 ^ n)
# - 전자는
# 지수함수, 후자는
# 루트함수
# 지수함수는
# n이
# 커지면
# 빠르게
# 증가, 루트함수는
# 천천히
# 증가
#
# n == 20
# 2 ^ (20 / 2) == 1024()
# sqrt(3 ^ 20) == 3 ^ (20 / 2) == 7.75
#
# 3.
# 2 ^ nlogn( >) n!
# - 2 ^ nlogn == 2l
# ogn ^ n == n ^ n
# n ^ n > n!
#
#
# 4.
# log2 ^ 2
# n( >) nsqrt(n)
# - log2 ^ 2
# n == 2
# n
# - nsqrt(n) == n ^ (3 / 2)
# 2
# n > n ^ (3 / 2)
#
# ### 집합과 조합론 6
# - 사실증명
# (A or B) and (A and B) = (A - B) or (B - A)
# - (A or B) and (A and B)
#
# = ((A or B) and not A) or ((A or B) and not B)
#
# = ((A and not A) or (B and not A)) or ((A and not B) or (B and not B))
#
# = (B and not A) or (A and not B)
#
# = (B - A) or (A - B)
#
# ### 집합과 조합론 12
# - 52
# 개의
# 카드에서
# 5
# 장
# 뽑는
# 조합
#
# -   52! / 5!47! == 2, 598, 960
#
# ### 기본수식4
# 1.
# T(n) = T(n / 2) + 1, T(1) = 1
# - T(n)
# = T(n / 2) + 1
#
# = T(n / 4) + 1 + 1
#
# = T(n / 8) + 1 + 1 + 1
#
# = ...
#
# = T(n / (2 ^ k)) + k
#
# - 2 ^ k == n, T(1) + log(n)
#
# T(n) = O(log(n))
#
# ### 기본수식6
# 1.
# T(n) = 2
# T(n / 2) + n, T(1) = 1
# -T(n)
# = 2
# T(n / 2) + n
#
# = 2(2
# T(n / 4) + (n / 2) + n
#
# = 2(2(2
# T(n / 8) + (n / 4))+(n / 2) + n
#
# = ...
#
# = 2 ^ k * T(n / 2 ^ k) + k
#
#   - 2 ^ k == n, nT(1) + nlog(n)
#
# T(n) = O(nlog(n))